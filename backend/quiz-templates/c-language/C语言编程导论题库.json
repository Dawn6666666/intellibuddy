{
  "题库说明": "本题库对应《编程导论 (C语言) (cs101)》知识点，涵盖C语言基本语法、控制结构、函数、指针、数组、字符串、结构体、动态内存、文件操作和预处理等内容。",
  "题库": [
    {
      "pointId": "cs101",
      "pointTitle": "编程导论 (C语言)",
      "quiz": [
        {
          "question": "C语言是一种什么类型的编程语言？",
          "type": "single",
          "options": [
            "编译型语言",
            "解释型语言",
            "脚本语言",
            "标记语言"
          ],
          "correctAnswer": 0,
          "explanation": "C语言是编译型语言，源代码需要通过编译器编译成机器码后才能执行。相比之下，Python等是解释型语言，逐行解释执行。"
        },
        {
          "question": "以下哪个是合法的C语言标识符？",
          "type": "single",
          "options": [
            "_sum",
            "2count",
            "int",
            "my-var"
          ],
          "correctAnswer": 0,
          "explanation": "C语言标识符必须以字母或下划线开头，后面可以跟字母、数字或下划线。_sum是合法的。2count以数字开头不合法，int是关键字，my-var包含非法字符'-'。"
        },
        {
          "question": "在C语言中，int类型通常占用多少字节？",
          "type": "single",
          "options": [
            "2字节",
            "4字节",
            "8字节",
            "取决于编译器和平台"
          ],
          "correctAnswer": 3,
          "explanation": "int的大小取决于编译器和平台。在32位系统上通常是4字节，在某些嵌入式系统上可能是2字节。C标准只规定了最小值，不同平台实现可能不同。"
        },
        {
          "question": "以下哪些是C语言的基本数据类型？",
          "type": "multiple",
          "options": [
            "int",
            "float",
            "char",
            "double",
            "string",
            "bool"
          ],
          "correctAnswer": [0, 1, 2, 3],
          "explanation": "C语言的基本数据类型包括：int（整型）、float（单精度浮点）、char（字符型）、double（双精度浮点）。string不是基本类型（字符串用char数组表示），bool是C99后引入的_Bool类型或stdbool.h中的bool。"
        },
        {
          "question": "表达式 5 / 2 在C语言中的结果是？",
          "type": "single",
          "options": [
            "2.5",
            "2",
            "3",
            "2.0"
          ],
          "correctAnswer": 1,
          "explanation": "整数除法会舍弃小数部分，5 / 2 = 2。如果要得到2.5，需要至少有一个操作数是浮点数，如 5.0 / 2 或 5 / 2.0。"
        },
        {
          "question": "关于C语言运算符优先级，以下说法正确的是？",
          "type": "multiple",
          "options": [
            "乘除运算符优先级高于加减",
            "赋值运算符优先级最低",
            "逻辑与（&&）优先级高于逻辑或（||）",
            "括号可以改变运算优先级"
          ],
          "correctAnswer": [0, 2, 3],
          "explanation": "乘除优先于加减，逻辑与优先于逻辑或，括号可以改变优先级。但赋值运算符不是最低的，逗号运算符的优先级更低。"
        },
        {
          "question": "switch语句中，每个case后面必须有break语句。",
          "type": "boolean",
          "options": ["正确", "错误"],
          "correctAnswer": 1,
          "explanation": "错误。break不是必须的，但如果省略break，程序会继续执行下一个case（fall-through）。是否使用break取决于具体需求，某些情况下故意省略break来实现多个case共享代码。"
        },
        {
          "question": "for循环 for(i=0; i<10; i++) 会执行多少次？",
          "type": "single",
          "options": [
            "9次",
            "10次",
            "11次",
            "无限次"
          ],
          "correctAnswer": 1,
          "explanation": "循环从i=0开始，当i<10时执行，i依次为0,1,2,...,9，共执行10次。当i=10时，条件i<10不满足，循环终止。"
        },
        {
          "question": "关于while和do-while循环，以下说法正确的是？",
          "type": "multiple",
          "options": [
            "while循环先判断条件再执行",
            "do-while循环先执行一次再判断条件",
            "do-while至少会执行一次循环体",
            "两种循环完全等价，可以互换"
          ],
          "correctAnswer": [0, 1, 2],
          "explanation": "while是先判断后执行，do-while是先执行后判断，因此do-while至少执行一次。虽然大多数情况下可以相互转换，但在初始条件不满足时，两者行为不同，所以不是完全等价。"
        },
        {
          "question": "break和continue语句的区别是什么？",
          "type": "single",
          "options": [
            "break跳出当前循环，continue跳过本次循环继续下一次",
            "break跳过本次循环，continue跳出整个循环",
            "两者功能完全相同",
            "break用于循环，continue用于switch"
          ],
          "correctAnswer": 0,
          "explanation": "break语句会完全跳出当前循环（或switch），continue语句会跳过本次循环的剩余代码，直接进入下一次循环的判断。"
        },
        {
          "question": "函数的定义必须包含哪些部分？",
          "type": "multiple",
          "options": [
            "返回值类型",
            "函数名",
            "参数列表",
            "函数体",
            "return语句"
          ],
          "correctAnswer": [0, 1, 2, 3],
          "explanation": "函数定义必须包含：返回值类型、函数名、参数列表（可以为空）、函数体。return语句不是必须的，void类型函数可以没有return，或使用不带值的return。"
        },
        {
          "question": "C语言中函数参数传递采用什么方式？",
          "type": "single",
          "options": [
            "值传递（pass by value）",
            "引用传递（pass by reference）",
            "地址传递",
            "以上都支持"
          ],
          "correctAnswer": 0,
          "explanation": "C语言函数参数传递采用值传递。如果想修改实参的值，需要传递指针（本质上仍是值传递，只是传递的值是地址）。C++支持引用传递，但C语言不支持。"
        },
        {
          "question": "递归函数必须包含什么？",
          "type": "multiple",
          "options": [
            "基线条件（终止条件）",
            "递归调用",
            "循环语句",
            "全局变量"
          ],
          "correctAnswer": [0, 1],
          "explanation": "递归函数必须包含：1) 基线条件（避免无限递归）；2) 递归调用（函数调用自身）。递归不需要循环语句，也不一定需要全局变量。"
        },
        {
          "question": "指针变量存储的是什么？",
          "type": "single",
          "options": [
            "内存地址",
            "变量的值",
            "变量的名称",
            "变量的类型"
          ],
          "correctAnswer": 0,
          "explanation": "指针变量存储的是内存地址。通过这个地址可以访问或修改该地址处的数据。"
        },
        {
          "question": "关于指针运算符，以下说法正确的是？",
          "type": "multiple",
          "options": [
            "&运算符用于获取变量的地址",
            "*运算符用于访问指针指向的值（解引用）",
            "&是取地址运算符，*是取值运算符",
            "指针必须先初始化才能使用"
          ],
          "correctAnswer": [0, 1, 2, 3],
          "explanation": "所有选项都正确。&获取地址，*解引用访问值。未初始化的指针（野指针）是非常危险的，使用前必须初始化。"
        },
        {
          "question": "空指针NULL的作用是什么？",
          "type": "single",
          "options": [
            "表示指针不指向任何有效内存地址",
            "表示指针指向地址0",
            "表示指针未定义",
            "以上都不对"
          ],
          "correctAnswer": 0,
          "explanation": "NULL是一个特殊的指针值，表示指针不指向任何有效的内存地址。通常用来初始化指针或检查指针是否有效。NULL在大多数系统上被定义为0或((void*)0)。"
        },
        {
          "question": "二级指针（指向指针的指针）的声明方式是？",
          "type": "single",
          "options": [
            "int **p;",
            "int *p*;",
            "int p**;",
            "pointer<int> p;"
          ],
          "correctAnswer": 0,
          "explanation": "二级指针的声明是 int **p，表示p是一个指向int指针的指针。常用于动态二维数组、函数参数（修改指针本身）等场景。"
        },
        {
          "question": "数组名在大多数情况下会退化为什么？",
          "type": "single",
          "options": [
            "指向数组首元素的指针",
            "数组的大小",
            "数组的类型",
            "数组的最后一个元素"
          ],
          "correctAnswer": 0,
          "explanation": "在大多数表达式中，数组名会退化为指向数组首元素的指针。例外情况包括：sizeof运算符和&运算符作用于数组时。"
        },
        {
          "question": "关于数组下标，以下说法正确的是？",
          "type": "multiple",
          "options": [
            "数组下标从0开始",
            "表达式arr[i]等价于*(arr+i)",
            "访问数组越界会导致编译错误",
            "可以使用负数下标"
          ],
          "correctAnswer": [0, 1],
          "explanation": "C语言数组下标从0开始，arr[i]等价于*(arr+i)。C语言不检查数组越界，越界访问是未定义行为，不一定导致编译错误。负数下标在某些情况下可以使用（如果指针指向数组中间），但通常应该避免。"
        },
        {
          "question": "如何正确声明一个包含10个元素的整型数组？",
          "type": "single",
          "options": [
            "int arr[10];",
            "int arr(10);",
            "array<int, 10> arr;",
            "int [10]arr;"
          ],
          "correctAnswer": 0,
          "explanation": "正确声明方式是 int arr[10]，表示一个包含10个int类型元素的数组。选项C是C++的std::array语法，不是C语言。"
        },
        {
          "question": "字符串在C语言中如何表示？",
          "type": "single",
          "options": [
            "以'\\\\0'结尾的字符数组",
            "string类型",
            "以空格结尾的字符数组",
            "以'\\\\n'结尾的字符数组"
          ],
          "correctAnswer": 0,
          "explanation": "C语言中字符串是以空字符'\\\\0'（ASCII值为0）结尾的字符数组。C语言没有string类型（C++才有std::string）。"
        },
        {
          "question": "关于字符串处理函数，以下哪些是正确的？",
          "type": "multiple",
          "options": [
            "strlen()返回字符串长度（不包括'\\\\0'）",
            "strcpy()用于字符串复制",
            "strcmp()用于字符串比较",
            "strcat()用于字符串连接"
          ],
          "correctAnswer": [0, 1, 2, 3],
          "explanation": "所有选项都正确。这些是<string.h>中常用的字符串处理函数：strlen求长度、strcpy复制、strcmp比较、strcat连接。使用时需要注意缓冲区溢出问题。"
        },
        {
          "question": "结构体的作用是什么？",
          "type": "single",
          "options": [
            "将不同类型的数据组合成一个新类型",
            "提高程序运行速度",
            "节省内存空间",
            "防止数据被修改"
          ],
          "correctAnswer": 0,
          "explanation": "结构体（struct）允许将不同类型的数据组合成一个自定义的复合数据类型，便于管理和传递相关联的数据。它不直接影响速度或节省空间（可能因内存对齐而占用更多空间）。"
        },
        {
          "question": "如何访问结构体指针的成员？",
          "type": "multiple",
          "options": [
            "使用箭头运算符 ptr->member",
            "使用点运算符 (*ptr).member",
            "使用点运算符 ptr.member",
            "以上方法都不对"
          ],
          "correctAnswer": [0, 1],
          "explanation": "访问结构体指针成员有两种等价方式：ptr->member 或 (*ptr).member。直接使用 ptr.member 是错误的，因为ptr是指针不是结构体变量。"
        },
        {
          "question": "typedef的作用是什么？",
          "type": "single",
          "options": [
            "为已有类型定义一个新名称（别名）",
            "定义一个新的数据类型",
            "声明一个函数",
            "定义一个宏"
          ],
          "correctAnswer": 0,
          "explanation": "typedef用于为已有类型创建别名，使代码更易读。例如 typedef struct Student STU; 使得可以用STU代替struct Student。它不创建新类型，只是给已有类型起别名。"
        },
        {
          "question": "malloc()函数的作用是什么？",
          "type": "single",
          "options": [
            "动态分配指定大小的内存",
            "释放动态分配的内存",
            "重新调整内存大小",
            "复制内存内容"
          ],
          "correctAnswer": 0,
          "explanation": "malloc(size)动态分配size字节的内存，返回指向该内存的指针。如果分配失败返回NULL。释放内存用free()，重新调整大小用realloc()。"
        },
        {
          "question": "关于动态内存管理，以下说法正确的是？",
          "type": "multiple",
          "options": [
            "malloc分配的内存必须用free释放",
            "free之后应该将指针设为NULL",
            "不能释放同一块内存两次",
            "动态分配的内存在函数返回后自动释放"
          ],
          "correctAnswer": [0, 1, 2],
          "explanation": "malloc分配的内存必须手动用free释放，否则会内存泄漏。释放后应将指针置为NULL防止野指针。重复释放会导致错误。动态内存不会自动释放，即使函数返回也依然存在，这正是动态内存的特点。"
        },
        {
          "question": "内存泄漏是指什么？",
          "type": "single",
          "options": [
            "分配的内存没有被释放",
            "指针指向错误的内存",
            "栈溢出",
            "数组越界"
          ],
          "correctAnswer": 0,
          "explanation": "内存泄漏是指程序动态分配的内存在使用完毕后没有被释放，导致可用内存逐渐减少。长时间运行的程序如果存在内存泄漏，最终可能耗尽系统内存。"
        },
        {
          "question": "fopen()函数的第二个参数\"r\"表示什么？",
          "type": "single",
          "options": [
            "以只读方式打开文件",
            "以写入方式打开文件",
            "以追加方式打开文件",
            "以二进制方式打开文件"
          ],
          "correctAnswer": 0,
          "explanation": "\"r\"表示以只读（read）模式打开文件。常用模式：\"r\"只读、\"w\"写入（覆盖）、\"a\"追加、\"r+\"读写、\"rb\"二进制读等。"
        },
        {
          "question": "关于文件操作，以下说法正确的是？",
          "type": "multiple",
          "options": [
            "使用完文件后必须调用fclose()关闭",
            "feof()用于检测是否到达文件末尾",
            "fprintf()可以格式化输出到文件",
            "所有文件操作都会自动刷新缓冲区"
          ],
          "correctAnswer": [0, 1, 2],
          "explanation": "文件使用后必须fclose()关闭以释放资源。feof()检测文件结束。fprintf()类似printf但输出到文件。文件操作有缓冲区，不是立即写入磁盘，需要fclose()或fflush()才会刷新。"
        }
      ]
    }
  ]
}

